{
  "name": "peer-doc",
  "private": true,
  "scripts": {
    "precommit": "lint-staged",
    "start": "meteor run",
    "lint": "eslint . --ext .js --ext .vue",
    "lint-ci": "eslint . --ext .js --ext .vue --format junit --output-file test-reports/js-lint-results.xml",
    "extract-strings": "make makemessages",
    "translations": "make translations",
    "test": "TEST_BROWSER_DRIVER=chrome meteor test --once --driver-package meteortesting:mocha --port 3100 --settings settings.example.json",
    "test-ci": "SERVER_TEST_REPORTER=xunit XUNIT_FILE=test-reports/test-results.xml TEST_BROWSER_DRIVER=chrome meteor test --once --driver-package meteortesting:mocha --port 3100 --settings settings.example.json",
    "test-watch": "TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --driver-package meteortesting:mocha --port 3100 --settings settings.example.json",
    "test-app": "meteor test --full-app --driver-package tmeasday:acceptance-test-driver --port 3000 --settings settings.example.json",
    "chimp-watch": "chimp --ddp=http://localhost:3000 --watch --mocha --path=tests/acceptance",
    "chimp-test": "chimp --ddp=http://localhost:3000 --mocha --path=tests/acceptance"
  },
  "dependencies": {
    "@babel/core": "^7.0.0-beta.38",
    "@babel/plugin-proposal-class-properties": "^7.0.0-beta.38",
    "@babel/runtime": "^7.0.0-beta.46",
    "autoprefixer": "^8.4.1",
    "babel-runtime": "^6.26.0",
    "bcrypt": "^2.0.1",
    "body-parser": "^1.18.3",
    "core-js": "^2.5.5",
    "css-loader": "^0.28.11",
    "material-design-icons": "git://github.com/mitar/material-design-icons.git",
    "meteor-node-stubs": "^0.3.2",
    "moment": "^2.22.1",
    "parseurl": "^1.3.2",
    "postcss": "^6.0.22",
    "postcss-easy-import": "^3.0.0",
    "postcss-load-config": "^1.2.0",
    "prosemirror-collab": "^1.0.0",
    "prosemirror-commands": "^1.0.7",
    "prosemirror-dropcursor": "^1.0.0",
    "prosemirror-gapcursor": "^1.0.2",
    "prosemirror-history": "^1.0.2",
    "prosemirror-keymap": "^1.0.1",
    "prosemirror-model": "^1.4.3",
    "prosemirror-schema-basic": "^1.0.0",
    "prosemirror-schema-list": "^1.0.0",
    "prosemirror-state": "^1.2.0",
    "prosemirror-view": "^1.3.0",
    "query-string": "^6.0.0",
    "randomcolor": "^0.5.3",
    "velocity-animate": "^1.5.1",
    "vue": "git://github.com/meteor-vue/vue.git#meteor",
    "vue-gettext": "^2.0.31",
    "vue-router": "^3.0.1",
    "vue-template-compiler": "^2.5.16",
    "vuetify": "^1.1.6"
  },
  "devDependencies": {
    "babel-eslint": "^8.2.3",
    "chai": "^3.5.0",
    "chimp": "^0.51.1",
    "chromedriver": "^2.38.2",
    "easygettext": "^2.3.0",
    "eslint": "^4.15.0",
    "eslint-config-airbnb-base": "^12.1.0",
    "eslint-import-resolver-meteor": "^0.4.0",
    "eslint-plugin-import": "^2.11.0",
    "eslint-plugin-meteor": "^4.2.0",
    "eslint-plugin-vue": "^4.5.0",
    "husky": "^0.14.3",
    "lint-staged": "^7.0.5",
    "selenium-webdriver": "^3.6.0"
  },
  "meteor": {
    "vueVersion": 2
  },
  "babel": {
    "plugins": [
      [
        "@babel/plugin-proposal-class-properties",
        {
          "loose": true
        }
      ]
    ]
  },
  "eslintConfig": {
    "env": {
      "node": true,
      "browser": true
    },
    "plugins": [
      "meteor"
    ],
    "settings": {
      "import/resolver": "meteor"
    },
    "extends": [
      "plugin:meteor/recommended",
      "plugin:vue/recommended",
      "airbnb-base"
    ],
    "parserOptions": {
      "parser": "babel-eslint",
      "allowImportExportEverywhere": true
    },
    "rules": {
      "import/no-extraneous-dependencies": 0,
      "import/extensions": 0,
      "import/no-absolute-path": 0,
      "import/prefer-default-export": 0,
      "no-underscore-dangle": 0,
      "quotes": 0,
      "prefer-arrow-callback": 0,
      "prefer-destructuring": 0,
      "no-else-return": 0,
      "no-continue": 0,
      "object-shorthand": [
        "error",
        "always",
        {
          "ignoreConstructors": false,
          "avoidQuotes": false
        }
      ],
      "brace-style": [
        "error",
        "stroustrup"
      ],
      "object-curly-spacing": [
        "error",
        "never"
      ],
      "object-curly-newline": [
        "error",
        {
          "multiline": true,
          "consistent": true
        }
      ],
      "max-len": [
        "error",
        {
          "code": 240,
          "comments": 140,
          "ignorePattern": "// TODO: "
        }
      ],
      "arrow-body-style": [
        "error",
        "always"
      ],
      "arrow-parens": [
        "error",
        "always"
      ],
      "no-restricted-syntax": [
        "error",
        {
          "selector": "ForInStatement",
          "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
        },
        {
          "selector": "WithStatement",
          "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
        }
      ],
      "no-unused-vars": [
        "error",
        {
          "vars": "all",
          "args": "none",
          "ignoreRestSiblings": true
        }
      ],
      "vue/mustache-interpolation-spacing": [
        "error",
        "never"
      ],
      "vue/prop-name-casing": [
        "error",
        "camelCase"
      ],
      "vue/html-closing-bracket-newline": [
        "error",
        {
          "singleline": "never",
          "multiline": "always"
        }
      ],
      "vue/html-closing-bracket-spacing": [
        "error"
      ],
      "indent": 0,
      "indent-legacy": [
        "error",
        2,
        {
          "SwitchCase": 1,
          "VariableDeclarator": 1,
          "outerIIFEBody": 1,
          "FunctionDeclaration": {
            "parameters": 1,
            "body": 1
          },
          "FunctionExpression": {
            "parameters": 1,
            "body": 1
          },
          "CallExpression": {
            "arguments": 1
          },
          "ArrayExpression": 1,
          "ObjectExpression": 1
        }
      ]
    }
  },
  "lint-staged": {
    "*.{js,vue}": [
      "eslint"
    ]
  }
}
